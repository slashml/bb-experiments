import { notFound } from 'next/navigation';
import { sessionStore } from '../../../lib/session-store';
import DocumentationViewer from '../../demo/components/DocumentationViewer';

interface DocsPageProps {
  params: Promise<{ sessionId: string }>;
}

export default async function DocsPage({ params }: DocsPageProps) {
  const { sessionId } = await params;

  // Get documentation from session store
  const documentation = sessionStore.getDocumentation(sessionId);
  const sessionProgress = sessionStore.getSession(sessionId);

  if (!documentation) {
    notFound();
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-pink-50">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent mb-2">
            üìã {documentation.platformName} Documentation
          </h1>
          <p className="text-gray-600">
            AI-generated documentation ‚Ä¢ Generated {new Date(documentation.generatedAt).toLocaleString()}
          </p>
          <div className="mt-4 inline-flex items-center px-3 py-1 bg-green-100 text-green-800 rounded-full text-sm">
            ‚úÖ Generated with Stagehand + Browserbase
          </div>
        </div>

        {/* Documentation Viewer */}
        <DocumentationViewer
          documentation={documentation}
          sessionProgress={sessionProgress}
          onReset={() => window.location.href = '/demo'}
        />

        {/* Footer */}
        <footer className="mt-16 text-center text-sm text-gray-500 border-t pt-8">
          <p>
            Generated with AI using Stagehand + Browserbase ‚Ä¢ {new Date().getFullYear()} AI Tinkerers Montreal
          </p>
          <p className="mt-2">
            <a href="/demo" className="text-purple-600 hover:text-purple-800 font-medium">
              ‚Üê Generate Your Own Documentation
            </a>
          </p>
        </footer>
      </div>
    </div>
  );
}

export async function generateMetadata({ params }: DocsPageProps) {
  const { sessionId } = await params;
  const documentation = sessionStore.getDocumentation(sessionId);

  if (!documentation) {
    return {
      title: 'Documentation Not Found',
      description: 'The requested documentation could not be found.'
    };
  }

  return {
    title: `${documentation.platformName} Documentation | AI Tinkerers Montreal`,
    description: `AI-generated documentation for ${documentation.platformName} using Stagehand + Browserbase automation.`,
    openGraph: {
      title: `${documentation.platformName} Documentation`,
      description: `Comprehensive documentation generated by AI for ${documentation.platformName}`,
      type: 'article',
      publishedTime: documentation.generatedAt,
    },
  };
}